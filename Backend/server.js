require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { OpenAI } = require('openai');
const PDFDocument = require('pdfkit'); // PDF support

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());

// ENV Keys
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

// Gemini API URL
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

// OpenRouter Client
const openai = new OpenAI({
    apiKey: OPENROUTER_API_KEY,
    baseURL: 'https://openrouter.ai/api/v1',
});

// Unified AI Response Generator
async function generateAIResponse(prompt, context) {
    const fullPrompt = `${context}\n\n${prompt}`.trim();

    try {
        const completion = await openai.chat.completions.create({
            model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
            messages: [
                { role: 'system', content: context },
                { role: 'user', content: prompt }
            ],
            extra_headers: {
                'HTTP-Referer': 'https://your-frontend.site',
                'X-Title': 'SahilAssignmentAI'
            }
        });

        const result = completion.choices[0].message.content;
        return { text: result, source: 'openrouter' };

    } catch (error) {
        console.warn('⚠️ OpenRouter failed. Trying Gemini...', error.message);
    }

    try {
        const response = await axios.post(GEMINI_API_URL, {
            contents: [{ parts: [{ text: fullPrompt }] }],
            generationConfig: {
                temperature: 0.7,
                topP: 0.95,
                topK: 40,
                maxOutputTokens: 2048
            },
            safetySettings: [
                { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_ONLY_HIGH" },
                { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_ONLY_HIGH" }
            ]
        });

        const result = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
        return { text: result || 'No result from Gemini.', source: 'gemini' };

    } catch (error) {
        console.error('❌ Gemini API Error:', error.message);
        throw new Error('Both AI services failed.');
    }
}

// PDF Generator
function generatePDF(content, res, filename = 'output.pdf') {
    const doc = new PDFDocument();
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=${filename}`);
    doc.pipe(res);
    doc.font('Times-Roman').fontSize(14).text(content);
    doc.moveDown();
    doc.fontSize(10).fillColor('gray').text('\nGenerated by SahilCodeLab', { align: 'center' });
    doc.end();
}

// 🚀 Assignment Endpoint
app.post('/generate-assignment', async (req, res) => {
    try {
        let { subject, topic, prompt } = req.body;

        // If no prompt, generate one based on subject + topic
        if (!prompt) {
            if (!subject || !topic) {
                return res.status(400).json({ error: "Either provide a prompt or both subject and topic." });
            }

            prompt = `
            Write a high-quality college-level assignment on the topic "${topic}" for the subject "${subject}".
            Include an engaging introduction, detailed explanation with key points, real-life examples (if applicable),
            and a strong conclusion. The content should be plagiarism-free, well-structured, and 800-1000 words long.
            Use a formal tone and add references if needed.
            `.trim();
        }

        const context = `
            You are an expert academic writer and assignment generator.
            Based on the user's subject and topic, generate rich, well-researched assignments for college students.
            Focus on clarity, structure, and academic value.
        `.trim();

        const result = await generateAIResponse(prompt, context);

        // Dynamic PDF filename
        const filename = `assignment-${subject?.replace(/\s+/g, '') || 'output'}-${Date.now()}.pdf`;

        if (req.query.download === 'pdf') {
            return generatePDF(result.text, res, filename);
        }

        res.json({ ...result, subject, topic });

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 📚 Long Answer Endpoint
app.post('/generate-long-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = `Provide a detailed 300-500 word explanation...`;

        const result = await generateAIResponse(prompt, context);
        if (req.query.download === 'pdf') {
            const filename = `long-answer-${Date.now()}.pdf`;
            return generatePDF(result.text, res, filename);
        }

        res.json(result);

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 🧠 Short Answer Endpoint
app.post('/generate-short-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = `Provide a concise 2-3 sentence answer to the question...`;

        const result = await generateAIResponse(prompt, context);
        res.json(result);

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 🔍 Health Check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'healthy', fallback: 'openrouter -> gemini' });
});

// 🌐 Start Server
app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
    console.log(`🔌 Fallback AI ready: OpenRouter > Gemini`);
});
