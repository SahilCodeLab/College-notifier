require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { OpenAI } = require('openai');
const PDFDocument = require('pdfkit');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

const openai = new OpenAI({
  apiKey: OPENROUTER_API_KEY,
  baseURL: 'https://openrouter.ai/api/v1',
});

// Unified AI Response Generator
async function generateAIResponse(prompt, context) {
  const fullPrompt = `${context}\n\n${prompt}`.trim();

  // Try OpenRouter First
  try {
    const completion = await openai.chat.completions.create({
      model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
      messages: [
        { role: 'system', content: context },
        { role: 'user', content: prompt }
      ],
      extra_headers: {
        'HTTP-Referer': 'https://your-frontend.site',
        'X-Title': 'SahilAssignmentAI'
      }
    });

    const result = completion.choices[0].message.content;
    return { text: result, source: 'openrouter' };

  } catch (error) {
    console.warn('⚠️ OpenRouter failed. Trying Gemini...', error.message);
  }

  // Fallback to Gemini
  try {
    const response = await axios.post(GEMINI_API_URL, {
      contents: [{ parts: [{ text: fullPrompt }] }],
      generationConfig: {
        temperature: 0.7,
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 2048
      },
      safetySettings: [
        { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_ONLY_HIGH" },
        { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_ONLY_HIGH" }
      ]
    });

    const result = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
    return { text: result || 'No result from Gemini.', source: 'gemini' };

  } catch (error) {
    console.error('❌ Gemini API Error:', error.message);
    throw new Error('Both AI services failed.');
  }
}

// Premium PDF Generator
function generatePDF(content, res) {
  const doc = new PDFDocument({
    size: 'A4',
    margins: { top: 50, bottom: 50, left: 72, right: 72 }
  });

  res.setHeader('Content-Type', 'application/pdf');
  res.setHeader('Content-Disposition', 'attachment; filename=Assignment_SahilCodeLab.pdf');

  doc.pipe(res);

  // Title Page
  doc
    .fontSize(24)
    .fillColor('#1F2937')
    .text('📘 AI Assignment Report', { align: 'center' })
    .moveDown(0.5)
    .fontSize(14)
    .fillColor('gray')
    .text('Generated by SahilCodeLab', { align: 'center' })
    .moveDown(2);

  // Main Content
  doc
    .font('Times-Roman')
    .fontSize(12)
    .fillColor('#000')
    .text(content, {
      align: 'left',
      lineGap: 4
    });

  // Footer
  doc.moveDown();
  doc.fontSize(10).fillColor('gray')
    .text('📎 Confidential — Do not share without permission.', {
      align: 'center'
    });

  doc.end();
}

// Assignment Endpoint
app.post('/generate-assignment', async (req, res) => {
  try {
    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ error: "Prompt is required" });

    const context = `
You are a professional academic writer.

🎯 Your task: Write a complete, clear, well-structured assignment of 9–10 pages (minimum 4000 words) on the following topic: "{{TOPIC}}"

📘 Structure:
1. Title Page
2. Table of Contents
3. Introduction
4. Main Body (6+ sections)
5. Data & Visuals (describe only)
6. Conclusion
7. References (APA format)

📝 Writing Rules:
- Formal, academic tone
- Clear headings & paragraphs
- No plagiarism; original content
- Markdown format output
    `.trim();

    const result = await generateAIResponse(prompt, context);
    if (req.query.download === 'pdf') return generatePDF(result.text, res);
    res.json(result);

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Short Answer Endpoint
app.post('/generate-short-answer', async (req, res) => {
  try {
    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ error: "Prompt is required" });

    const context = "Provide a concise 2–3 sentence answer to the question.";
    const result = await generateAIResponse(prompt, context);

    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Long Answer Endpoint
app.post('/generate-long-answer', async (req, res) => {
  try {
    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ error: "Prompt is required" });

    const context = "Provide a detailed 300–500 word explanation.";
    const result = await generateAIResponse(prompt, context);

    if (req.query.download === 'pdf') return generatePDF(result.text, res);
    res.json(result);

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Bulk QnA Endpoint
app.post('/generate-bulk-qna', async (req, res) => {
  try {
    const { questions } = req.body;
    if (!Array.isArray(questions) || questions.length === 0) {
      return res.status(400).json({ error: "Questions array is required" });
    }

    const prompt = `
You will get a list of questions. Answer each one briefly (2–5 sentences) using formal tone.

### Questions:
${questions.map((q, i) => `${i + 1}. ${q}`).join('\n')}
    `.trim();

    const context = "You are an assistant for students. Provide short, clear, non-plagiarized answers.";

    const result = await generateAIResponse(prompt, context);
    if (req.query.download === 'pdf') return generatePDF(result.text, res);
    res.json(result);

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Summary Generator
app.post('/generate-summary', async (req, res) => {
  try {
    const { topic } = req.body;
    if (!topic) return res.status(400).json({ error: "Topic is required" });

    const context = "Write a short paragraph summarizing the given topic clearly.";
    const result = await generateAIResponse(topic, context);

    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Health Check
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'healthy', fallback: 'openrouter -> gemini' });
});

// Start Server
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
  console.log(`🔌 Fallback AI ready: OpenRouter > Gemini`);
});