require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { OpenAI } = require('openai');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Enable CORS
app.use(cors({
    origin: ['http://localhost:5500', 'http://127.0.0.1:5500'], // Adjust for your frontend
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type']
}));

app.use(express.json());
app.use(express.static('public'));

// API Keys
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

// Gemini API URL
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

// OpenRouter Client
const openai = new OpenAI({
    apiKey: OPENROUTER_API_KEY,
    baseURL: 'https://openrouter.ai/api/v1',
});

// Generate AI Response
async function generateAIResponse(prompt, context) {
    const fullPrompt = `${context}\n\n${prompt}`.trim();

    try {
        const completion = await openai.chat.completions.create({
            model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
            messages: [
                { role: 'system', content: context },
                { role: 'user', content: prompt }
            ],
            extra_headers: {
                'HTTP-Referer': 'http://localhost:5500',
                'X-Title': 'SahilAssignmentAI'
            }
        });

        const result = completion.choices[0].message.content;
        return { text: result, source: 'openrouter' };

    } catch (error) {
        console.warn('OpenRouter failed. Trying Gemini...', error.message);
    }

    try {
        const response = await axios.post(GEMINI_API_URL, {
            contents: [{ parts: [{ text: fullPrompt }] }],
            generationConfig: {
                temperature: 0.7,
                topP: 0.95,
                topK: 40,
                maxOutputTokens: 2048
            },
            safetySettings: [
                { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_ONLY_HIGH" },
                { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_ONLY_HIGH" }
            ]
        });

        const result = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
        return { text: result || 'No result from Gemini.', source: 'gemini' };

    } catch (error) {
        console.error('Gemini API Error:', error.message);
        throw new Error('Both AI services failed.');
    }
}

// Generate Premium PDF
function generatePremiumPDF(content, res, userDetails = {}) {
    const doc = new PDFDocument({
        margin: 50,
        size: 'A4',
        bufferPages: true
    });

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=premium_assignment.pdf');

    doc.pipe(res);

    // Colors
    const colors = {
        primary: '#3498db',
        secondary: '#2c3e50',
        accent: '#e74c3c',
        text: '#333333',
        lightGray: '#f5f5f5'
    };

    // Watermark and Page Numbers
    doc.on('pageAdded', () => {
        const pageNumber = doc.bufferedPageRange().count;
        
        // Watermark
        doc.fillColor('#e0e0e0')
            .fontSize(60)
            .rotate(-45, { origin: [doc.page.width / 2, doc.page.height / 2] })
            .opacity(0.1)
            .text('Generated by SahilCodeLab', doc.page.width / 2 - 150, doc.page.height / 2, {
                align: 'center',
                width: 300
            })
            .rotate(45, { origin: [doc.page.width / 2, doc.page.height / 2] })
            .opacity(1);

        // Page Number
        doc.fillColor(colors.text)
            .fontSize(10)
            .text(`Page ${pageNumber}`, doc.page.width - 50, doc.page.height - 30, {
                align: 'right'
            });
    });

    doc.addPage();

    // Cover Page
    doc.rect(0, 0, doc.page.width, doc.page.height).fill(colors.lightGray);
    
    doc.rect(50, 150, doc.page.width - 100, 120)
        .fill(colors.primary)
        .fillColor('white')
        .fontSize(28)
        .font('Helvetica-Bold')
        .text('ASSIGNMENT', 50, 180, {
            width: doc.page.width - 100,
            align: 'center'
        });
    
    doc.fillColor(colors.secondary)
        .fontSize(20)
        .text(content.split('\n')[0].replace('#', '').trim(), 50, 250, {
            width: doc.page.width - 100,
            align: 'center'
        });
    
    doc.moveTo(50, 300)
        .lineTo(doc.page.width - 50, 300)
        .stroke(colors.accent)
        .lineWidth(2);
    
    doc.fillColor(colors.text)
        .fontSize(14)
        .text(`Prepared by: ${userDetails.name || '[Student Name]'}`, 50, 320, {
            width: doc.page.width - 100,
            align: 'center'
        })
        .text(`Course: ${userDetails.course || '[Course Name]'}`, 50, 350, {
            width: doc.page.width - 100,
            align: 'center'
        })
        .text(`Date: ${userDetails.date || new Date().toLocaleDateString()}`, 50, 380, {
            width: doc.page.width - 100,
            align: 'center'
        });
    
    doc.fontSize(10)
        .text('Generated by SahilCodeLab', 50, doc.page.height - 50, {
            width: doc.page.width - 100,
            align: 'center'
        });
    
    doc.addPage();

    // Table of Contents
    doc.fillColor(colors.secondary)
        .fontSize(18)
        .font('Helvetica-Bold')
        .text('TABLE OF CONTENTS', { align: 'center' });
    
    doc.moveDown();
    
    const headings = content.split('\n').filter(line => line.startsWith('##'));
    headings.forEach(heading => {
        doc.fillColor(colors.primary)
            .font('Helvetica')
            .fontSize(12)
            .text(heading.replace('##', '').trim(), {
                indent: 20,
                continued: true
            })
            .fillColor(colors.text)
            .text('.........................', {
                continued: true,
                align: 'right'
            })
            .text(doc.bufferedPageRange().count + 1, {
                align: 'right'
            });
        doc.moveDown(0.5);
    });

    // Main Content
    doc.addPage();
    
    content.split('\n').forEach(line => {
        if (doc.y > doc.page.height - 100) doc.addPage();
        
        if (line.startsWith('##')) {
            doc.fillColor(colors.secondary)
                .font('Helvetica-Bold')
                .fontSize(16)
                .text(line.replace('##', '').trim(), {
                    align: 'left'
                });
            doc.moveDown();
        } else if (line.startsWith('###')) {
            doc.fillColor(colors.primary)
                .font('Helvetica-Bold')
                .fontSize(14)
                .text(line.replace('###', '').trim(), {
                    align: 'left'
                });
            doc.moveDown();
        } else if (line.trim() !== '') {
            doc.fillColor(colors.text)
                .font('Times-Roman')
                .fontSize(12)
                .text(line.trim(), {
                    align: 'justify',
                    lineGap: 5,
                    paragraphGap: 8,
                    indent: 20
                });
            doc.moveDown();
        }
    });

    // References
    doc.addPage();
    doc.fillColor(colors.secondary)
        .font('Helvetica-Bold')
        .fontSize(16)
        .text('REFERENCES', { align: 'center' });
    
    doc.moveDown();
    
    const references = [
        "Author, A. (Year). Title of work. Publisher.",
        "Researcher, B. (Year). Article title. Journal Name, volume(issue), page range.",
        "Writer, C. (Year). Book title. City: Publisher.",
        "Scholar, D. (Year). Paper title. Conference Proceedings.",
        "Expert, E. (Year). Online resource. Retrieved from URL"
    ];
    
    references.forEach((ref, i) => {
        doc.fillColor(colors.text)
            .font('Times-Roman')
            .fontSize(11)
            .text(`${i + 1}. ${ref}`, {
                indent: 20
            });
        doc.moveDown(0.5);
    });

    doc.end();
}

// Generate Assignment Endpoint
app.post('/generate-assignment', async (req, res) => {
    try {
        const { prompt, userDetails } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = `
You are a professional academic writer. Generate a well-structured assignment with:
1. Title Page
2. Table of Contents
3. Introduction
4. Main Body (6+ sections)
5. Conclusion
6. References (5 APA citations)

Format requirements:
- Use markdown headers (##, ###)
- Formal academic tone
- 4000+ words
- Original content only
`.trim();

        const result = await generateAIResponse(prompt, context);
        
        // In production, store in database instead
        const contentId = Date.now().toString();
        const tempDir = path.join(__dirname, 'temp');
        if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);
        fs.writeFileSync(path.join(tempDir, `${contentId}.json`), JSON.stringify({
            content: result.text,
            userDetails: userDetails || {}
        }));
        
        res.json({
            ...result,
            contentId,
            downloadUrl: `/download-pdf/${contentId}`
        });

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Download PDF Endpoint
app.get('/download-pdf/:contentId', (req, res) => {
    try {
        const contentId = req.params.contentId;
        const tempDir = path.join(__dirname, 'temp');
        const filePath = path.join(tempDir, `${contentId}.json`);
        
        if (!fs.existsSync(filePath)) {
            return res.status(404).json({ error: "Content not found or expired" });
        }
        
        const { content, userDetails } = JSON.parse(fs.readFileSync(filePath));
        generatePremiumPDF(content, res, userDetails);
        
        // Clean up
        fs.unlinkSync(filePath);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Health Check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'healthy' });
});

// Start Server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});