require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { OpenAI } = require('openai');
const PDFDocument = require('pdfkit'); // 📄 PDF support

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());

// ENV Keys
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

// ✅ Gemini API URL - Fixed
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

// ✅ OpenRouter Client
const openai = new OpenAI({
    apiKey: OPENROUTER_API_KEY,
    baseURL: 'https://openrouter.ai/api/v1',
});

// ✨ Unified AI Response Generator
async function generateAIResponse(prompt, context) {
    const fullPrompt = `${context}\n\n${prompt}`.trim();

    try {
        const completion = await openai.chat.completions.create({
            model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
            messages: [
                { role: 'system', content: context },
                { role: 'user', content: prompt }
            ],
            extra_headers: {
                'HTTP-Referer': 'https://your-frontend.site',
                'X-Title': 'SahilAssignmentAI'
            }
        });

        const result = completion.choices[0].message.content;
        return { text: result, source: 'openrouter' };

    } catch (error) {
        console.warn('⚠️ OpenRouter failed. Trying Gemini...', error.message);
    }

    try {
        const response = await axios.post(GEMINI_API_URL, {
            contents: [{ parts: [{ text: fullPrompt }] }],
            generationConfig: {
                temperature: 0.7,
                topP: 0.95,
                topK: 40,
                maxOutputTokens: 2048
            },
            safetySettings: [
                { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_ONLY_HIGH" },
                { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_ONLY_HIGH" }
            ]
        });

        const result = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
        return { text: result || 'No result from Gemini.', source: 'gemini' };

    } catch (error) {
        console.error('❌ Gemini API Error:', error.message);
        throw new Error('Both AI services failed.');
    }
}

// 📄 PDF Generator Function
function generatePDF(content, res) {
    const doc = new PDFDocument();
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=output.pdf');

    doc.pipe(res);
    doc.font('Times-Roman').fontSize(14);
    doc.text(content);
    doc.moveDown();
    doc.fontSize(10).fillColor('gray').text('\nGenerated by SahilCodeLab', { align: 'center' });
    doc.end();
}

// 🚀 Assignment Endpoint
app.post('/generate-assignment', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = `
You are a professional academic writer.
🎯 Your task: Write a complete, clear, well-structured assignment of 9–10 pages (minimum 4000 words) on the following topic: "{{TOPIC}}"

📘 Structure:
1. Title Page
2. Table of Contents
3. Introduction
4. Main Body
5. Data & Visuals (Optional)
6. Conclusion
7. References
📝 Writing Rules:
- Use formal academic tone
📌 Output format: Markdown with headers (#, ##)
`.trim();

        const result = await generateAIResponse(prompt, context);
        if (req.query.download === 'pdf') return generatePDF(result.text, res);
        res.json(result);

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 🧠 Short Answer Endpoint
app.post('/generate-short-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = "Provide a concise 2-3 sentence answer to the question...";
        const result = await generateAIResponse(prompt, context);
        res.json(result);

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 📚 Long Answer Endpoint
app.post('/generate-long-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = "Provide a detailed 300-500 word explanation...";
        const result = await generateAIResponse(prompt, context);
        if (req.query.download === 'pdf') return generatePDF(result.text, res);
        res.json(result);

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 📦 Bulk Questions PDF Generator
app.post('/generate-bulk-pdf', async (req, res) => {
    try {
        const { questions } = req.body;
        if (!Array.isArray(questions) || questions.length === 0) {
            return res.status(400).json({ error: 'Questions array is required.' });
        }

        const finalAnswers = [];

        for (let i = 0; i < questions.length; i++) {
            const { question, marks } = questions[i];
            const context = `Answer the following academic question in a formal tone. It is a ${marks} marks question, so explain accordingly. Use paragraphs or bullet points as needed.`;

            const result = await generateAIResponse(question, context);
            finalAnswers.push({
                qNo: i + 1,
                marks,
                question,
                answer: result.text
            });
        }

        const doc = new PDFDocument({ margin: 50 });
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', 'attachment; filename=bulk_answers.pdf');

        doc.pipe(res);
        doc.font('Times-Roman').fontSize(16).text('📘 Bulk Question Answers', { align: 'center' });
        doc.moveDown();

        finalAnswers.forEach(({ qNo, marks, question, answer }) => {
            doc.fontSize(12).fillColor('black')
                .text(`\n🔹 Question ${qNo} (${marks} Marks): ${question}`, { underline: true });
            doc.moveDown(0.5);
            doc.fontSize(11).fillColor('black').text(answer);
            doc.moveDown();
        });

        doc.fontSize(10).fillColor('gray')
            .text('\nGenerated by SahilCodeLab AI Assistant', { align: 'center' });
        doc.end();

    } catch (error) {
        console.error("❌ Bulk PDF Error:", error.message);
        res.status(500).json({ error: 'Bulk question generation failed.' });
    }
});

// 🔍 Health Check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'healthy', fallback: 'openrouter -> gemini' });
});

// 🌐 Start Server
app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
    console.log(`🔌 Fallback AI ready: OpenRouter > Gemini`);
});