// ✅ FAST & OPTIMIZED VERSION (SAME LOGIC) require('dotenv').config(); const express = require('express'); const cors = require('cors'); const axios = require('axios'); const { OpenAI } = require('openai'); const PDFDocument = require('pdfkit');

const app = express(); const PORT = process.env.PORT || 3000;

app.use(cors()); app.use(express.json());

const GEMINI_API_KEY = process.env.GEMINI_API_KEY; const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY; const GEMINI_API_URL = https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY};

const openai = new OpenAI({ apiKey: OPENROUTER_API_KEY, baseURL: 'https://openrouter.ai/api/v1', });

// ✅ UNIFIED AI RESPONSE HANDLER WITH TIMEOUT CONTROL async function generateAIResponse(prompt, context) { const fullPrompt = ${context}\n\n${prompt}.trim();

try { const completion = await openai.chat.completions.create({ model: 'deepseek/deepseek-r1-0528-qwen3-8b:free', messages: [ { role: 'system', content: context }, { role: 'user', content: prompt } ], max_tokens: 3000, temperature: 0.7, extra_headers: { 'HTTP-Referer': 'https://your-frontend.site', 'X-Title': 'SahilAssignmentAI' } }); const result = completion.choices[0].message.content; return { text: result, source: 'openrouter' }; } catch (error) { console.warn('⚠️ OpenRouter failed. Trying Gemini...', error.message); }

try { const response = await axios.post(GEMINI_API_URL, { contents: [{ parts: [{ text: fullPrompt }] }], generationConfig: { temperature: 0.7, topP: 0.95, topK: 40, maxOutputTokens: 2048 }, safetySettings: [ { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_ONLY_HIGH" }, { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_ONLY_HIGH" } ] }); const result = response.data?.candidates?.[0]?.content?.parts?.[0]?.text; return { text: result || 'No result from Gemini.', source: 'gemini' }; } catch (error) { console.error('❌ Gemini API Error:', error.message); throw new Error('Both AI services failed.'); } }

// ✅ PDF GENERATOR (Streamed) function generatePDF(content, res, filename = 'output.pdf') { const doc = new PDFDocument(); res.setHeader('Content-Type', 'application/pdf'); res.setHeader('Content-Disposition', attachment; filename=${filename}); doc.pipe(res); doc.font('Times-Roman').fontSize(14).text(content); doc.moveDown(); doc.fontSize(10).fillColor('gray').text('\nGenerated by SahilCodeLab', { align: 'center' }); doc.end(); }

// 🚀 ASSIGNMENT ENDPOINT (ASYNC OPTIMIZED) app.post('/generate-assignment', async (req, res) => { try { let { subject, topic, prompt, level } = req.body;

if (!prompt) {
  if (!subject || !topic || !level) {
    return res.status(400).json({ error: "Provide prompt or subject, topic, and level." });
  }

  prompt = `Write a plagiarism-free academic assignment on: \n\n\"${topic}\"\nSubject: ${subject} (${level})\n\nStructure:\n1. Introduction (300 words)\n2. Literature Review\n3. Main Body (Theory, Case Studies, ${subject.includes("Science") ? 'Methodology' : subject.includes("Arts") ? 'Theoretical Frameworks' : 'Market Trends'})\n4. Conclusion (summary + insights)\n5. APA references (8+)\nTotal: ~3000 words`.trim();

  const context = `You are a senior ${subject} professor creating detailed, research-level assignments for ${level} students.`;
  const result = await generateAIResponse(prompt, context);
  const filename = `assignment-${subject?.replace(/\s+/g, '')}-${Date.now()}.pdf`;

  if (req.query.download === 'pdf') return generatePDF(result.text, res, filename);
  res.json({ ...result, subject, topic });
}

} catch (error) { res.status(500).json({ error: error.message }); } });

// 📚 LONG ANSWER (300–500 WORDS) app.post('/generate-long-answer', async (req, res) => { try { const { prompt } = req.body; if (!prompt) return res.status(400).json({ error: "Prompt is required" });

const context = `Academic expert. Provide a 300–500 word answer with clear explanation, examples, and conclusion.`;
const result = await generateAIResponse(prompt, context);

if (req.query.download === 'pdf') return generatePDF(result.text, res, `long-answer-${Date.now()}.pdf`);
res.json(result);

} catch (error) { res.status(500).json({ error: error.message }); } });

// 🧠 SHORT ANSWER (2–3 SENTENCES) app.post('/generate-short-answer', async (req, res) => { try { const { prompt } = req.body; if (!prompt) return res.status(400).json({ error: "Prompt is required" });

const context = `Give a brief 2–3 sentence academic answer.`;
const result = await generateAIResponse(prompt, context);
res.json(result);

} catch (error) { res.status(500).json({ error: error.message }); } });

// 🔍 HEALTH CHECK app.get('/health', (req, res) => { res.status(200).json({ status: 'healthy', fallback: 'openrouter -> gemini' }); });

// 🌐 SERVER START app.listen(PORT, () => { console.log(🚀 Server running on http://localhost:${PORT}); });

