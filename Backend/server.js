require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { OpenAI } = require('openai');
const PDFDocument = require('pdfkit');

const app = express();
const PORT = process.env.PORT || 3000;

// ✅ CORS Setup (PDF headers allowed)
app.use(cors({
    origin: '*',
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type'],
    exposedHeaders: ['Content-Disposition']
}));
app.use(express.json());

// ✅ API Keys & URLs
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

const openai = new OpenAI({
    apiKey: OPENROUTER_API_KEY,
    baseURL: 'https://openrouter.ai/api/v1',
});

// ✨ AI Response Generator
async function generateAIResponse(prompt, context) {
    const fullPrompt = `${context}\n\n${prompt}`.trim();

    try {
        const completion = await openai.chat.completions.create({
            model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
            messages: [
                { role: 'system', content: context },
                { role: 'user', content: prompt }
            ],
            extra_headers: {
                'HTTP-Referer': 'https://your-frontend.site',
                'X-Title': 'SahilAssignmentAI'
            }
        });
        const result = completion.choices[0].message.content;
        return { text: result, source: 'openrouter' };
    } catch (error) {
        console.warn('⚠️ OpenRouter failed. Trying Gemini...', error.message);
    }

    try {
        const response = await axios.post(GEMINI_API_URL, {
            contents: [{ parts: [{ text: fullPrompt }] }],
            generationConfig: {
                temperature: 0.7,
                topP: 0.95,
                topK: 40,
                maxOutputTokens: 8192
            },
            safetySettings: [
                { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_ONLY_HIGH" },
                { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_ONLY_HIGH" }
            ]
        });

        const result = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
        return { text: result || 'No result from Gemini.', source: 'gemini' };

    } catch (error) {
        console.error('❌ Gemini API Error:', error.message);
        throw new Error('Both AI services failed.');
    }
}

// 📄 PDF Generator (with design)
function generatePDF(content, res) {
    const doc = new PDFDocument({
        size: 'A4',
        margins: { top: 50, bottom: 50, left: 72, right: 72 },
        bufferPages: true
    });

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=Assignment-SahilCodeLab.pdf');
    doc.pipe(res);

    const palette = {
        primary: '#0D47A1',
        text: '#333333'
    };

    let pageNumber = 1;

    doc.on('pageAdded', () => {
        pageNumber++;
        const bottom = doc.page.height - 40;
        doc.moveTo(doc.page.margins.left, bottom)
           .lineTo(doc.page.width - doc.page.margins.right, bottom)
           .stroke('#DDDDDD');
        doc.fontSize(8).fillColor('#AAAAAA')
            .text(`Generated by SahilCodeLab`, doc.page.margins.left, bottom + 10, { align: 'left' });
        doc.fontSize(8).fillColor('#AAAAAA')
            .text(`Page ${pageNumber}`, doc.page.margins.left, bottom + 10, { align: 'right' });
    });

    const lines = content.split('\n');
    let isFirstPage = true;

    lines.forEach((line) => {
        line = line.trim();
        if (isFirstPage && line.startsWith('# ')) {
            doc.font('Helvetica-Bold').fontSize(24).fillColor(palette.primary)
               .text(line.substring(2), { align: 'center' });
            doc.moveDown();
        } else if (isFirstPage && line.includes('Student Name:')) {
            doc.fontSize(12).fillColor(palette.text).text(line, { align: 'center' });
        } else if (line.startsWith('## ')) {
            if (isFirstPage) { isFirstPage = false; doc.addPage(); }
            doc.moveDown(1.5).font('Helvetica-Bold').fontSize(16)
               .fillColor(palette.primary).text(line.substring(3));
        } else if (line.startsWith('### ')) {
            doc.moveDown(1).font('Helvetica-Bold').fontSize(13)
               .fillColor(palette.text).text(line.substring(4));
        } else if (line.startsWith('* ')) {
            doc.font('Helvetica').fontSize(11).text(`• ${line.substring(2)}`, { indent: 20 });
        } else if (line) {
            doc.font('Helvetica').fontSize(11).fillColor(palette.text)
               .text(line, { align: 'justify', lineGap: 4 });
        }
    });

    doc.end();
}

// 🚀 Assignment Route
app.post('/generate-assignment', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = `
You are a professional academic writer. Your output MUST be in English.

🎯 Your task: Write a complete, clear, well-structured assignment of 9–10 pages (minimum 4000 words) on the following topic: "${prompt}"

📘 Structure:
# [Main Title]
Student Name: [Placeholder]
Subject Name: [Placeholder]
Submission Date: [Placeholder]

## Table of Contents
...

## Introduction
...

## Main Sections (6+)
...

## Conclusion
...

## References
- *Reference 1*
- *Reference 2*
`.trim();

        const result = await generateAIResponse(prompt, context);

        if (req.query.download === 'pdf') {
            res.setHeader('Access-Control-Expose-Headers', 'Content-Disposition');
            return generatePDF(result.text, res);
        }

        res.json(result);

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 📚 Long Answer
app.post('/generate-long-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = "Provide a detailed 300-500 word explanation with markdown formatting.";

        const result = await generateAIResponse(prompt, context);

        if (req.query.download === 'pdf') {
            res.setHeader('Access-Control-Expose-Headers', 'Content-Disposition');
            return generatePDF(result.text, res);
        }

        res.json(result);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 💬 Short Answer
app.post('/generate-short-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = "Give a short, precise answer to this question (2–3 sentences).";
        const result = await generateAIResponse(prompt, context);

        res.json(result);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ✅ Health Check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'healthy', fallback: 'openrouter → gemini' });
});

// 🚀 Start Server
app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
    console.log(`✅ Ready to generate assignments with PDF support`);
});