require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { OpenAI } = require('openai');
const PDFDocument = require('pdfkit'); // 📄 PDF support

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());

// ENV Keys
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

// ✅ Gemini API URL - Fixed
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

// ✅ OpenRouter Client
const openai = new OpenAI({
    apiKey: OPENROUTER_API_KEY,
    baseURL: 'https://openrouter.ai/api/v1',
});

// ✨ Unified AI Response Generator
async function generateAIResponse(prompt, context) {
    const fullPrompt = `${context}\n\n${prompt}`.trim();

    // Try OpenRouter First
    try {
        const completion = await openai.chat.completions.create({
            model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
            messages: [
                { role: 'system', content: context },
                { role: 'user', content: prompt }
            ],
            extra_headers: {
                'HTTP-Referer': 'https://your-frontend.site', // Replace with your actual site URL
                'X-Title': 'SahilAssignmentAI'
            }
        });

        const result = completion.choices[0].message.content;
        return { text: result, source: 'openrouter' };

    } catch (error) {
        console.warn('⚠️ OpenRouter failed. Trying Gemini...', error.message);
    }

    // Fallback to Gemini
    try {
        const response = await axios.post(GEMINI_API_URL, {
            contents: [{ parts: [{ text: fullPrompt }] }],
            generationConfig: {
                temperature: 0.7,
                topP: 0.95,
                topK: 40,
                maxOutputTokens: 8192 // Increased for long assignments
            },
            safetySettings: [
                { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_ONLY_HIGH" },
                { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_ONLY_HIGH" }
            ]
        });

        const result = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
        return { text: result || 'No result from Gemini.', source: 'gemini' };

    } catch (error) {
        console.error('❌ Gemini API Error:', error.message);
        throw new Error('Both AI services failed.');
    }
}


// =======================================================================
// 📄 NUEVA Y MEJORADA FUNCIÓN DE GENERACIÓN DE PDF
// =======================================================================
function generatePDF(content, res) {
    // --- 1. Paleta de Colores Dinámica ---
    const colorPalettes = [
        { primary: '#0D47A1', text: '#333333', light: '#E3F2FD' }, // Azul Profesional
        { primary: '#004D40', text: '#333333', light: '#E0F2F1' }, // Verde Oscuro
        { primary: '#4A148C', text: '#333333', light: '#F3E5F5' }, // Púrpura
        { primary: '#BF360C', text: '#333333', light: '#FBE9E7' }, // Naranja Quemado
        { primary: '#37474F', text: '#333333', light: '#ECEFF1' }, // Gris Corporativo
    ];
    const palette = colorPalettes[Math.floor(Math.random() * colorPalettes.length)];

    // --- 2. Configuración del Documento ---
    const doc = new PDFDocument({
        size: 'A4',
        margins: { top: 50, bottom: 50, left: 72, right: 72 },
        bufferPages: true // Necesario para los números de página
    });

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=Assignment-SahilCodeLab.pdf');
    doc.pipe(res);

    // --- 3. Definición de Fuentes ---
    const FONT_REGULAR = 'Helvetica';
    const FONT_BOLD = 'Helvetica-Bold';

    // --- 4. Encabezado y Pie de Página (Watermark) ---
    const range = doc.bufferedPageRange();
    let pageNumber = range.start;
    const totalPages = range.start + range.count;

    doc.on('pageAdded', () => {
        pageNumber++;
        // Encabezado (en todas las páginas excepto la primera)
        if (pageNumber > 1) {
             doc.fontSize(9).fillColor(palette.primary)
               .text('Generated by SahilAssignmentAI', doc.page.margins.left, 30, { align: 'left' });
            doc.moveTo(doc.page.margins.left, 45).lineTo(doc.page.width - doc.page.margins.right, 45).stroke(palette.primary);
        }

        // Pie de Página
        const bottom = doc.page.height - 40;
        doc.moveTo(doc.page.margins.left, bottom).lineTo(doc.page.width - doc.page.margins.right, bottom).stroke('#DDDDDD');
        doc.fontSize(8).fillColor('#AAAAAA')
            .text(`Generated by SahilCodeLab`, doc.page.margins.left, bottom + 10, { align: 'left' });
        doc.fontSize(8).fillColor('#AAAAAA')
            .text(`Page ${pageNumber}`, doc.page.margins.left, bottom + 10, { align: 'right' });
    });

    // --- 5. Parseo del Contenido Markdown ---
    const lines = content.split('\n');
    let isFirstPage = true;

    lines.forEach((line, index) => {
        line = line.trim();

        if (isFirstPage && line.startsWith('# ')) { // Título principal para la portada
            doc.font(FONT_BOLD).fontSize(26).fillColor(palette.primary)
               .text(line.substring(2), { align: 'center' });
            doc.moveDown(1.5);
        } else if (isFirstPage && (line.includes('Student Name:') || line.includes('Subject Name:') || line.includes('Submission Date:'))) {
            doc.font(FONT_REGULAR).fontSize(12).fillColor(palette.text)
               .text(line, { align: 'center' });
            doc.moveDown(0.5);
        } else if (line.startsWith('## ')) { // Títulos de Sección
            if (isFirstPage) {
                isFirstPage = false;
                doc.addPage();
            }
            doc.moveDown(1.5);
            doc.font(FONT_BOLD).fontSize(18).fillColor(palette.primary)
               .text(line.substring(3));
            doc.moveDown(0.5);
        } else if (line.startsWith('### ')) { // Subtítulos
            if (isFirstPage) { isFirstPage = false; doc.addPage(); }
            doc.moveDown(1);
            doc.font(FONT_BOLD).fontSize(14).fillColor(palette.text)
               .text(line.substring(4));
            doc.moveDown(0.5);
        } else if (line.startsWith('* ') || line.startsWith('- ')) { // Listas con viñetas
            if (isFirstPage) { isFirstPage = false; doc.addPage(); }
            doc.moveDown(0.2);
            doc.font(FONT_REGULAR).fontSize(11).fillColor(palette.text)
               .bullet(doc.x, doc.y, 5, { textIndent: 20 }).text(line.substring(2));
        } else if (line) { // Párrafos de texto
            if (isFirstPage && line.length > 50) { // Si hay texto largo, pasamos a la siguiente página
                isFirstPage = false;
                doc.addPage();
            }
            doc.font(FONT_REGULAR).fontSize(11).fillColor(palette.text)
               .text(line, { align: 'justify', lineGap: 4 });
            doc.moveDown(0.5);
        }
    });

    // --- 6. Finalizar el PDF ---
    doc.end();
}


// 🚀 Assignment Endpoint
app.post('/generate-assignment', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = `
You are a professional academic writer. Your output MUST be in English.

🎯 Your task: Write a complete, clear, well-structured assignment of 9–10 pages (minimum 4000 words) on the following topic: "${prompt}"

📘 Structure:
1.  Title Page:
    - Use a single '#' for the main title. Example: # The Impact of AI on Modern Society
    - Student Name: [Placeholder]
    - Subject Name: [Placeholder]
    - Submission Date: [Placeholder]

2.  Table of Contents:
    - Use '## Table of Contents' as the heading.
    - List all main sections (those starting with '##') with approximate page numbers.

3.  Introduction:
    - Use '## Introduction' as the heading.
    - Briefly introduce the topic, state the purpose, and outline the scope.

4.  Main Body (At least 6 sections, use '##' for each major section heading):
    - Use headings like: '## Definitions and Key Concepts', '## Historical Background', '## The Importance of [Topic]', '## Current Trends and Status', '## Challenges and Criticisms', '## Case Studies', '## Future Outlook'.
    - Use '###' for subheadings within a section if needed.
    - Use bullet points with '*' for lists.

5.  Conclusion:
    - Use '## Conclusion' as the heading.
    - Summarize key points and offer final thoughts.

6.  References:
    - Use '## References' as the heading.
    - List at least 5 citations in APA format. Use '*' for each reference entry.

📝 Writing Rules:
-   CRITICAL: Use Markdown formatting as specified above (#, ##, ###, *).
-   Use a formal, academic tone suitable for university-level work.
-   Ensure the content is well-organized, clear, and logical.
-   Produce completely original, plagiarism-free text.
-   Do not use bold (**) or italics (*) within paragraphs. Use them only for formatting if absolutely necessary.
`.trim();

        const result = await generateAIResponse(prompt, context);
        // La opción para descargar PDF ahora usa la nueva función
        if (req.query.download === 'pdf') {
            return generatePDF(result.text, res);
        }
        res.json(result);

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 🧠 Short Answer Endpoint
app.post('/generate-short-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = "Provide a concise 2-3 sentence answer to the question...";

        const result = await generateAIResponse(prompt, context);
        res.json(result);

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 📚 Long Answer Endpoint
app.post('/generate-long-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = "Provide a detailed 300-500 word explanation, using Markdown for structure (## for title, ### for sub-points, * for lists).";

        const result = await generateAIResponse(prompt, context);
        // La opción para descargar PDF ahora usa la nueva función
        if (req.query.download === 'pdf') {
            return generatePDF(result.text, res);
        }
        res.json(result);

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 🔍 Health Check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'healthy', fallback: 'openrouter -> gemini' });
});

// 🌐 Start Server
app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
    console.log(`🔌 Fallback AI ready: OpenRouter > Gemini`);
});