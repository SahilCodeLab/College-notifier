
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { OpenAI } = require('openai');
const PDFDocument = require('pdfkit');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public')); // Serve frontend files from 'public' folder

// ENV Keys
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

// Gemini API URL
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

// OpenRouter Client
const openai = new OpenAI({
    apiKey: OPENROUTER_API_KEY,
    baseURL: 'https://openrouter.ai/api/v1',
});

// Unified AI Response Generator
async function generateAIResponse(prompt, context) {
    const fullPrompt = `${context}\n\n${prompt}`.trim();

    try {
        const completion = await openai.chat.completions.create({
            model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
            messages: [
                { role: 'system', content: context },
                { role: 'user', content: prompt }
            ],
            extra_headers: {
                'HTTP-Referer': 'http://localhost:3000', // Update with your frontend URL
                'X-Title': 'SahilAssignmentAI'
            }
        });
        return { text: completion.choices[0].message.content, source: 'openrouter' };
    } catch (error) {
        console.warn('⚠️ OpenRouter failed. Trying Gemini...', error.message);
    }

    try {
        const response = await axios.post(GEMINI_API_URL, {
            contents: [{ parts: [{ text: fullPrompt }] }],
            generationConfig: {
                temperature: 0.7,
                topP: 0.95,
                topK: 40,
                maxOutputTokens: 2048
            },
            safetySettings: [
                { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_ONLY_HIGH" },
                { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_ONLY_HIGH" }
            ]
        });
        const result = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
        return { text: result || 'No result from Gemini.', source: 'gemini' };
    } catch (error) {
        console.error('❌ Gemini API Error:', error.message);
        throw new Error('Both AI services failed.');
    }
}

// PDF Generator Function with Premium Design
function generatePDF(content, res) {
    const doc = new PDFDocument({
        margins: { top: 50, bottom: 50, left: 50, right: 50 }, // Improved margins
        size: 'A4',
        info: {
            Title: 'Assignment Document',
            Author: 'SahilCodeLab',
            Subject: 'Generated Assignment',
            Creator: 'SahilCodeLab'
        }
    });

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=output.pdf');

    doc.pipe(res);

    // Register fonts (use built-in Helvetica for professional look)
    doc.registerFont('Helvetica', 'Helvetica');
    doc.registerFont('Helvetica-Bold', 'Helvetica-Bold');

    // Add watermark and footer on every page
    doc.on('pageAdded', () => {
        // Watermark: Centered, semi-transparent
        doc.save()
           .font('Helvetica')
           .fontSize(50)
           .opacity(0.1) // Semi-transparent
           .fillColor('gray')
           .text('Generated by SahilCodeLab', 0, doc.page.height / 2 - 25, {
               align: 'center',
               rotate: 45 // Diagonal watermark
           })
           .restore();

        // Footer: Button-like element
        const footerY = doc.page.height - 50;
        const buttonWidth = 150;
        const buttonHeight = 30;
        const buttonX = (doc.page.width - buttonWidth) / 2; // Centered

        // Draw button-like rectangle
        doc.rect(buttonX, footerY, buttonWidth, buttonHeight)
           .lineWidth(1)
           .strokeColor('#3498db')
           .fillColor('#e6f3ff')
           .fillAndStroke();

        // Add text inside button
        doc.font('Helvetica')
           .fontSize(12)
           .fillColor('#3498db')
           .text('SahilCodeLab', buttonX, footerY + 8, {
               width: buttonWidth,
               align: 'center'
           });
    });

    // Parse and format content (assuming Markdown-like structure)
    const lines = content.split('\n');
    let currentY = 50; // Start position after top margin

    lines.forEach((line, index) => {
        if (currentY > doc.page.height - 100) {
            doc.addPage(); // Add new page if content exceeds page height
            currentY = 50;
        }

        if (line.startsWith('## ')) {
            // Heading 2 (e.g., ## Introduction)
            doc.font('Helvetica-Bold')
               .fontSize(16)
               .fillColor('#2c3e50') // Dark blue for headers
               .text(line.replace('## ', ''), 50, currentY, { continued: false });
            currentY += 25;
        } else if (line.startsWith('### ')) {
            // Heading 3 (e.g., ### Key Concepts)
            doc.font('Helvetica-Bold')
               .fontSize(14)
               .fillColor('#2c3e50')
               .text(line.replace('### ', ''), 50, currentY, { continued: false });
            currentY += 20;
        } else if (line.startsWith('- ') || line.startsWith('* ')) {
            // Bullet points
            doc.font('Helvetica')
               .fontSize(12)
               .fillColor('black')
               .text(`• ${line.slice(2)}`, 60, currentY, { continued: false });
            currentY += 15;
        } else if (line.trim() === '') {
            // Empty line for paragraph spacing
            currentY += 10;
        } else {
            // Regular paragraph
            doc.font('Helvetica')
               .fontSize(12)
               .fillColor('black')
               .text(line, 50, currentY, { continued: false, align: 'justify' });
            currentY += 15;
        }
    });

    doc.end();
}

// PDF Download Endpoint
app.post('/download-pdf', async (req, res) => {
    try {
        const { content } = req.body;
        if (!content) return res.status(400).json({ error: "Content is required" });
        generatePDF(content, res);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Assignment Endpoint
app.post('/generate-assignment', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = `
You are a professional academic writer.

🎯 Your task: Write a complete, clear, well-structured assignment of 9–10 pages (minimum 4000 words) on the following topic: "{{TOPIC}}"

📘 Structure:
1. Title Page
   - Assignment Title
   - Student Name: [Placeholder]
   - Subject Name: [Placeholder]
   - Submission Date: [Placeholder]

2. Table of Contents
   - Auto-generate section-wise TOC (include page numbers approx.)

3. Introduction
   - Briefly introduce the topic
   - Purpose of the assignment
   - Scope & relevance of the topic

4. Main Body (At least 6 sections):
   - Definitions & key concepts
   - Historical background
   - Importance of the topic
   - Current trends or status
   - Challenges / problems
   - Case studies or real-world examples
   - Future possibilities
   - Role in society, education, tech, etc.

5. Data & Visuals (Optional)
   - Describe charts or tables if needed (don't embed images)

6. Conclusion
   - Summary of all key points
   - Final thoughts or opinions
   - Any recommendations

7. References
   - Include 5 citations in APA format (can be fictional but realistic)

📝 Writing Rules:
- Use formal, academic tone (college/university level)
- Organize with clear headings and paragraphs
- Avoid any corrupted characters or unreadable formatting
- No plagiarism; completely original writing
- Focus on clarity, logic, and deep insights

📌 Output format:
- Use Markdown with headers (##, ###)
- Avoid using bold/italic inside text unless needed
- Use bullet points, numbered lists where appropriate
`.trim();

        const result = await generateAIResponse(prompt, context);
        res.json(result);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Short Answer Endpoint
app.post('/generate-short-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = "Provide a concise 2-3 sentence answer to the question.";
        const result = await generateAIResponse(prompt, context);
        res.json(result);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Long Answer Endpoint
app.post('/generate-long-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        if (!prompt) return res.status(400).json({ error: "Prompt is required" });

        const context = "Provide a detailed 300-500 word explanation.";
        const result = await generateAIResponse(prompt, context);
        res.json(result);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Health Check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'healthy', fallback: 'openrouter -> gemini' });
});

// Start Server
app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
    console.log(`🔌 Fallback AI ready: OpenRouter > Gemini`);
});